snippet $(LD) "linker" Ab
$(LD) $^ $(LDFLAGS) -o $@
endsnippet

snippet template "template for Makefile" b
EXE = main
OBJS = main.o
CLEAN_RM =

#
# This is a generic Makefile designed to compile a sample directory of code.
# This file depends on variables having been set before calling:
#   EXE: The name of the result file
#   OBJS: Array of objects files (.o) to be generated
#   CLEAN_RM: Optional list of additional files to delete on 

# Compiler/linker config and object/depfile directory:
CXX = g++
LD = g++
OBJS_DIR = .objs

# Flags for linking:
LDFLAGS += -std=c++14
# Flags for compile:
CXXFLAGS += -std=c++14 -g -c

# Rule for  (first/default rule):
all: $(EXE)

# Rule for linking the final executable:
# - $(EXE) depends on all object files in $(OBJS)
# -  function adds the directory name $(OBJS_DIR) before every object file
$(EXE): $(patsubst %.o, $(OBJS_DIR)/%.o, $(OBJS))
	$(LD) $^ $(LDFLAGS) -o $@

# Ensure .objs/ exists:
$(OBJS_DIR):
	@mkdir -p $(OBJS_DIR)

# Rules for compiling source code.
# - Every object file is required by $(EXE)
# - Generates the rule requiring the .cpp file of the same name
$(OBJS_DIR)/%.o: %.cpp | $(OBJS_DIR)
	$(CXX) $(CXXFLAGS) $< -o $@

# Standard C++ Makefile rules:
clean:
	rm -rf $(EXE) $(OBJS_DIR) $(CLEAN_RM) *.o *.d

.PHONY: all clean
endsnippet
