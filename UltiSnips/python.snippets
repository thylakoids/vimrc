extends pythonColorPrint
extends pythonScripts
global !p
from vimsnippets import noexitdocstring
endglobal

snippet if__name "if __name__=='__main__':" b
if __name__ == '__main__':
	$0
endsnippet

snippet defparser "argparse" b
def parser():
	import argparse
	import sys
	parser = argparse.ArgumentParser()
	parser.add_argument('-$1', '--$2')
	args = parser.parse_args()
	if not sys.argv[1:]:
		parser.print_help()
		parser.exit(1)
	return vars(args)


$0
endsnippet

snippet logging.basicConfig "logging.basicConfig" b
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(filename)s[line:%(lineno)d](%(funcName)s) -%(name)s: %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)
$0
endsnippet

snippet try "try...except..." b
try:
	${1:${VISUAL:code to be checked}}
except:
	# import traceback
	# logger.debug('\n' + traceback.format_exc())
	logger.exception()
$0
endsnippet

context "noexitdocstring(snip)"
snippet "(^\s*)def (\w*?)\((.*?)\)\s*(->\s*(.*?))?\s*:" "doc string" br
`!p
define = match.group(0)
indent =  "\n" + match.group(1) + "    "
fname = "\"\"\"" + match.group(2)
params = [s.strip() for s in match.group(3).split(',')]
params_str = indent.join([':param {}:'.format(p) for p in params if p not in ["", "self", "cls"]])
return_typ = match.group(5)
return_str = f":return {return_typ}:" if return_typ else ":return:"
snip.rv = ((indent.join([define, fname, params_str, return_str, "\"\"\""])
			if params_str else indent.join([define, fname, return_str, "\"\"\""])
			) + indent)
`$0
endsnippet

snippet "class Exc" "custom Error" Ab
class ${1:LoginError}(Exception):
    def __init__(self, msg):
        pass
$0
endsnippet

snippet "new Enum" "define enum" Ab
from enum import Enum
# 创建一个枚举类
${1:Color} = Enum('${2:Color}', ($3{'red', 'green', 'blue'}))
endsnippet
