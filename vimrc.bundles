" ==========================================
" bundle Êèí‰ª∂ÁÆ°ÁêÜÂíåÈÖçÁΩÆÈ°π
" ==========================================

" ----------------------------------------------------------------------------
" ‰ΩøÁî® vim-plug ÁÆ°ÁêÜÊèí‰ª∂
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------


call plug#begin('~/.vim/bundle')

" ÁßªÂä®ÂÖâÊ†áÂà∞Êèí‰ª∂Âêç‰∏ä, ‰ΩøÁî®'#'Âø´ÈÄüË∑≥ËΩ¨Âà∞ÊØè‰∏™Êèí‰ª∂ÁöÑÈÖçÁΩÆÂ§Ñ
let os = substitute(system('uname'), "\n", "", "")
" ÁæéËßÇ
"-------------------
" airline
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" colorscheme
Plug 'altercation/vim-colors-solarized'
Plug 'crusoexia/vim-monokai'
Plug 'danilo-augusto/vim-afterglow'
Plug 'w0ng/vim-hybrid'
Plug 'dracula/vim'
Plug 'lifepillar/vim-solarized8'
" git
Plug 'airblade/vim-gitgutter'
" markdown
" Plug 'godlygeek/tabular'
" Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'    " npm -g install instant-markdown-d
Plug 'mzlogin/vim-markdown-toc'
" Âø´ÈÄüÊ≥®Èáä, Êñá‰ª∂ÊµèËßà
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
" Ëá™Âä®Ë°•ÂÖ®
"-------------------
Plug 'Valloric/YouCompleteMe'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'davidhalter/jedi-vim'
" input methods
Plug 'ybian/smartim'
" folding for python???
" Plug 'tmhedberg/SimpylFold'
Plug 'Yggdroot/indentLine'
" docstring for python
Plug 'heavenshell/vim-pydocstring', {'do': 'make install'}
" ËØ≠Ê≥ïÈ´ò‰∫Æ
Plug 'dense-analysis/ale'
Plug 'luochen1990/rainbow'
" search
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" quickrun
Plug 'skywind3000/asyncrun.vim'
" multiple cursors
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
" Latex
Plug 'lervag/vimtex' , {'for':['tex']}
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'}
" cursor shape
if !has('nvim')
    Plug 'jszakmeister/vim-togglecursor'
endif
" outline viewer
" Plug 'majutsushi/tagbar'    "deprecated:using LeaderfFunction
" Restore session
Plug 'tpope/vim-obsession'
" operator: like `gU` Uppercase
" -------------------------------
" Teach Vim about titlecase, with support for motions and text objects. Using `gt`, `gT` will apply to a line.
Plug 'christoomey/vim-titlecase'      "gt gT
Plug 'christoomey/vim-system-copy'    "cp cP cv cV
"System Integration
" -------------------
Plug 'christoomey/vim-tmux-navigator'    " Seamless navigation between tmux panes and vim splits
Plug 'christoomey/vim-tmux-runner'       " issue:Can't set orientation to h, <leader>ror, wrong.
Plug 'Townk/vim-autoclose'
call plug#end()


" ################### Êèí‰ª∂ÁÆ°ÁêÜ ##################

" ################### ÊòæÁ§∫Â¢ûÂº∫ ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_left_alt_sep = '‚ùØ'
    let g:airline_right_sep = '‚óÄ'
    let g:airline_right_alt_sep = '‚ùÆ'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.branch = '‚éá'
    let g:airline_theme='powerlineish'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

" " solarized {{{
"     let g:solarized_termtrans=1
"     let g:solarized_contrast="normal"
"     let g:solarized_visibility="normal"
" " }}}

" ################### git ###################
" let g:gitgutter_map_keys = 0
" nmap ]c <Plug>(GitGutterNextHunk)
" nmap [c <Plug>(GitGutterPrevHunk)
" map <leader>hp <plug>(gitgutterpreviewhunk)
" nmap <leader>hu <plug>(gitgutterundohunk)
nnoremap <silent> ]c :GitGutterNextHunk<CR>:GitGutterPreviewHunk<CR>
nnoremap <silent> [c :GitGutterPrevHunk<CR>:GitGutterPreviewHunk<CR>
nnoremap <silent> gu :GitGutterUndoHunk<CR>
nnoremap <silent> gs :GitGutterStageHunk<CR>

" ################# markdown ################
" markdown {{{
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_no_default_key_mappings = 1
" }}}
" vim-markdown-toc{{{
    let g:vmt_list_item_char='1.'
" }}}
" ################ YCM #######################
" YouCompleteMe{{{
let g:ycm_semantic_triggers = {'python': ['re!from\s+\S+\s+import\s']}
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 3
" nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_previous_completion = []
let g:ycm_key_list_stop_completion = ['<CR>']
if os=='Linux'
    let g:ycm_python_interpreter_path = '/usr/bin/python3'
elseif os=='Darwin'
    let g:ycm_python_interpreter_path = '/usr/local/opt/python/libexec/bin/python'
endif
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'
"disable diagnostic
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0
"}}}
"supertabe{{{
"Why does <tab> navigate the completion menu from bottom to top
let g:SuperTabDefaultCompletionType = "<c-n>"
"}}}
" ############## Programming ###############
"nerdcommenter{{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
"}}}
"indentLine{{{
let g:indentLine_concealcursor = ''
"}}}
"smartim{{{
"some people reported that it is slow while editing with vim-multiple-cursors, to fix this, put this in .vimrc:
" function! Multiple_cursors_before()
"   let g:smartim_disable = 1
" endfunction
" function! Multiple_cursors_after()
"   unlet g:smartim_disable
" endfunction
"}}}
"SimpylFold{{{
let g:SimpylFold_docstring_preview=1
let g:SimpylFold_fold_docstring =0
let g:SimpylFold_fold_import=0
"}}}
" "syntastic'{{{
" let python_highlight_all=1
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 0
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 1
" "}}}
" ale{{{
highlight clear ALEErrorSign
highlight clear ALEWarningSign
highlight link ALEWarningSign Todo
highlight link ALEErrorSign SpecialChar

" let g:ale_sign_error = '‚úò'
" let g:ale_sign_warning = '‚ö†'
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
" let g:ale_sign_error = 'üò°'
" let g:ale_sign_warning = 'üòÖ'
let g:ale_sign_style_error = '‚óâ'
let g:ale_sign_style_warning = '‚óâ'
let g:ale_fix_on_save = 1

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
nmap [e <plug>(ale_previous_wrap)
nmap ]e <plug>(ale_next_wrap)
" let g:ale_set_balloons=1
" let g:ale_python_flake8_args="--ignore=E501"
" let g:ale_sign_priority=11
let g:gitgutter_preview_win_floating=1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\   'go': ['go', 'golint', 'errcheck']
\}
"  [autopep8]: ~/.config/pycodestyle: E501, E702
"  [flake8]: ~/.config/flake8
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'python' : ['autopep8', 'isort']
\}
" }}}
" quickrun{{{
" Quick run via <F5>
nnoremap <F5> :call <SID>compile_and_run()<CR>

function! s:compile_and_run()
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc % -o %<; time ./%<"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
    elseif &filetype == 'java'
       exec "AsyncRun! javac %; time java %<"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash %"
    elseif &filetype == 'python'
       exec "AsyncRun! python %"
    elseif &filetype =='javascript'
        exec "AsyncRun! node %"
    elseif &filetype =='tex'
        exec "VimtexCompile"
    endif
endfunction

" asyncrun now has an option for opening quickfix automatically
let g:asyncrun_open = 10
" }}}
"vimtex{{{
let g:tex_flavor='latex'       "set filetype to tex instead plaintex
if os=='Linux'
    let g:vimtex_view_method='general'       "need xdotool
elseif os=='Darwin'
    let g:vimtex_view_method='skim'
endif
" let g:vimtex_view_automatic = 1
" let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmgs'
let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode --shell-escape $*'
let g:vimtex_compiler_latexmk = {
        \ 'executable' : 'latexmk',
        \ 'options' : [
        \   '-xelatex',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ],
        \}
let g:vimtex_complete_bib_simple = 1
  if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
"}}}
"ultisnips{{{
let g:UltiSnipsExpandTrigger = '<s-tab>'

let g:UltiSnipsJumpForwardTrigger      = '<nope>'
let g:UltiSnipsJumpBackwardTrigger     = '<nope>'
let g:UltiSnipsEditSplit="horizontal"
"}}}
"jedi-vim{{{
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#max_doc_height = 15
let g:jedi#show_call_signatures = 1
let g:jedi#show_call_signatures_delay = 60
"}}}
"togglecursor{{{
if !has('nvim')
    let g:togglecursor_default = "block"
    let g:togglecursor_insert = "line"
    let g:togglecursor_leave = "line"
    let g:togglecursor_disable_tmux = 0
endif
    "}}}
"nerdtree{{{
noremap <F2> :NERDTreeToggle<CR>
" autocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p
let g:NERDTreeWinSize = 15
"}}}
"tagbar{{{
let g:tagbar_type_javascript = {
      \ 'ctagstype': 'javascript',
      \ 'kinds': [
      \ 'A:arrays',
      \ 'P:properties',
      \ 'T:tags',
      \ 'O:objects',
      \ 'G:generator functions',
      \ 'F:functions',
      \ 'C:constructors/classes',
      \ 'M:methods',
      \ 'V:variables',
      \ 'I:imports',
      \ 'E:exports',
      \ 'S:styled components'
      \ ]}
noremap <F3> :TagbarToggle<CR>
"}}}
"pydocstring{{{
nmap <silent> <C-I> <Plug>(pydocstring)
"}}}
"rainbow{{{
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
    \    'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \    'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \    'operators': '_,_',
    \    'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \    'separately': {
    \        '*': {},
    \        'tex': {
    \            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \        },
    \        'lisp': {
    \            'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \        },
    \        'vim': {
    \            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \        },
    \        'html': {
    \            'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \        },
    \        'css': 0,
    \    }
    \}
"}}}
"vim-tmux-runner{{{
" python
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1
"}}}
"vim-tmux-runner{{{
let g:VtrUseVtrMaps = 1
let g:VtrPercentage = 30
"}}}
"LeaderF{{{
let g:Lf_WindowPosition='popup'
let g:Lf_ShortcutF='<C-P>'
let g:Lf_HideHelp=1
" let g:LF_UseCache=0
" let g:LF_UseMemoryCache=0
noremap <F3> :LeaderfFunction!<cr>
" let g:Lf_ExternalCommand = 'rg --files --no-ignore "%s"'    "gitignore affect the Lf_WildIgnore in a git repo
"}}}
