" ==========================================
" bundle 插件管理和配置项
" ==========================================

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------


call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" 美观
"-------------------
" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" colorscheme
Plug 'altercation/vim-colors-solarized'
Plug 'crusoexia/vim-monokai'
" git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" 快速去行尾空格 :FixWhitespace
Plug 'bronson/vim-trailing-whitespace'
" markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'    " npm -g install instant-markdown-d
Plug 'mzlogin/vim-markdown-toc'
" 快速注释, 文件浏览
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
" 自动补全
"-------------------
Plug 'Valloric/YouCompleteMe'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
Plug 'davidhalter/jedi-vim'
" input methods
Plug 'ybian/smartim'
" folding for python???
Plug 'tmhedberg/SimpylFold'
Plug 'Yggdroot/indentLine'
" 语法高亮
"Plug 'scrooloose/syntastic'
Plug 'w0rp/ale'
" Plug 'tell-k/vim-autopep8'
" Plug 'andviro/flake8-vim'
" Plug 'nvie/vim-flake8'
" Plug 'luochen1990/rainbow'
" search
" Plug 'kien/ctrlp.vim'
" quickrun
Plug 'skywind3000/asyncrun.vim'
" multiple cursors
" Plug 'terryma/vim-multiple-cursors'
" Latex
Plug 'lervag/vimtex' , {'for':['tex']}
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'}
" cursor shape
if !has('nvim')
    Plug 'jszakmeister/vim-togglecursor'
endif
" outline viewer
" Plug 'majutsushi/tagbar'
" Plug 'vim-scripts/taglist.vim'
call plug#end()


" ################### 插件管理 ##################

" ################### 显示增强 ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_theme='powerlineish'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

" " solarized {{{
"     let g:solarized_termtrans=1
"     let g:solarized_contrast="normal"
"     let g:solarized_visibility="normal"
" " }}}

" ################### git ###################
let g:gitgutter_map_keys = 0
" nmap ]h <Plug>GitGutterNextHunk
" nmap [h <Plug>GitGutterPrevHunk
" nmap <leader>] <Plug>GitGutterPreviewHunk
" nmap <leader>[ <Plug>GitGutterUndoHunk

" ################# markdown ################
" markdown {{{
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_no_default_key_mappings = 1
" }}}
" vim-markdown-toc{{{
    let g:vmt_list_item_char='1.'
" }}}
" ################ YCM #######################
" YouCompleteMe{{{
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 3
" nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_previous_completion = []
let g:ycm_key_list_stop_completion = ['<CR>']
let g:ycm_python_interpreter_path = '/usr/bin/python3'
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'
"}}}
"supertabe{{{
"Why does <tab> navigate the completion menu from bottom to top
let g:SuperTabDefaultCompletionType = "<c-n>"
"}}}
" ############## Programming ###############
"nerdcommenter{{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
"}}}
"indentLine{{{
let g:indentLine_concealcursor = ''
"}}}
"smartim{{{
"some people reported that it is slow while editing with vim-multiple-cursors, to fix this, put this in .vimrc:
" function! Multiple_cursors_before()
"   let g:smartim_disable = 1
" endfunction
" function! Multiple_cursors_after()
"   unlet g:smartim_disable
" endfunction
"}}}
"SimpylFold{{{
let g:SimpylFold_docstring_preview=1
let g:SimpylFold_fold_docstring =0
let g:SimpylFold_fold_import=0
"}}}
" "syntastic'{{{
" let python_highlight_all=1
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 0
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 1
" "}}}
" ale{{{
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_python_flake8_args="--ignore=E501"
let g:ale_linters = {
\   'javascript': ['jshint'],
\   'python': ['flake8'],
\   'go': ['go', 'golint', 'errcheck']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'python' : ['autopep8', 'isort']
\}
" Code Formatter
" autocmd FileType python nnoremap <Leader>= :0,$!yapf<CR>
" autocmd FileType python nnoremap <Leader>= :ALEFix<CR>
" }}}
" " flake8{{{
" autocmd BufWritePost *.py call Flake8()
" let g:flake8_show_quickfix=0
" let g:flake8_show_in_gutter=1
" let g:flake8_show_in_file=1
" " }}}
" quickrun{{{
" Quick run via <F5>
nnoremap <F5> :call <SID>compile_and_run()<CR>

function! s:compile_and_run()
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc % -o %<; time ./%<"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
    elseif &filetype == 'java'
       exec "AsyncRun! javac %; time java %<"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash %"
    elseif &filetype == 'python'
       exec "AsyncRun! python %"
    elseif &filetype =='javascript'
        exec "AsyncRun! node %"
    elseif &filetype =='tex'
        exec "VimtexCompile"
    endif
endfunction

" Deprecated:
" augroup SPACEVIM_ASYNCRUN
"     autocmd!
"    " Automatically open the quickfix window
"     autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
" augroup END
"
" asyncrun now has an option for opening quickfix automatically
let g:asyncrun_open = 15
let g:asyncrun_open = 8
" }}}
"vimtex{{{
let g:tex_flavor='latex'       "set filetype to tex instead plaintex
let g:vimtex_view_method='skim'
" let g:vimtex_view_automatic = 1
" let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmgs'
let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode --shell-escape $*'
let g:vimtex_complete_bib_simple = 1
  if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
"}}}
"ultisnips{{{
let g:UltiSnipsExpandTrigger = '<tab>'

let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
"}}}
"jedi-vim{{{
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#max_doc_height = 15
let g:jedi#show_call_signatures = 1
let g:jedi#show_call_signatures_delay = 60
"}}}
if !has('nvim')
    "togglecursor{{{
    let g:togglecursor_default = "block"
    let g:togglecursor_insert = "line"
    let g:togglecursor_leave = "line"
    let g:togglecursor_disable_tmux = 0
    "}}}
endif

"nerdtree{{{
noremap <F2> :NERDTreeToggle<CR>
"}}}
